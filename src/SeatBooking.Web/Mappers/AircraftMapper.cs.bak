using SeatBooking.Domain.AircraftAggregate;
using SeatBooking.Web.Models;

namespace SeatBooking.Web.Mappers;

public static class AircraftMapper
{
    public static Aircraft ToDomain(this SeatMapDto dto)
    {
        // Create Aircraft
        var aircraft = new Aircraft(dto.Aircraft, dto.Aircraft);

        // Map cabins
        if (dto.Cabins != null)
        {
            foreach (var cabinDto in dto.Cabins)
            {
                // Use the DDD constructor for Cabin
                var cabin = new Cabin(cabinDto.Deck, dto.Aircraft);

                // Map seat rows
                if (cabinDto.SeatRows != null)
                {
                    foreach (var rowDto in cabinDto.SeatRows)
                    {
                        var seatRow = new SeatRow(rowDto.RowNumber);

                        // Map seat slots
                        if (rowDto.Seats != null)
                        {
                            foreach (var seatDto in rowDto.Seats)
                            {
                                var seatSlot = new SeatSlot(
                                    seatDto.StorefrontSlotCode,
                                    seatDto.Code,
                                    seatDto.Available,
                                    seatDto.Entitled,
                                    seatDto.FreeOfCharge,
                                    seatDto.FeeWaived,
                                    seatDto.OriginallySelected,
                                    seatDto.EntitledRuleId,
                                    seatDto.FeeWaivedRuleId,
                                    seatDto.RefundIndicator
                                );

                                // Map designations
                                if (seatDto.Designations != null)
                                {
                                    foreach (var designation in seatDto.Designations)
                                        seatSlot.AddDesignation(new SlotDesignation(designation));
                                }

                                // Map limitations
                                if (seatDto.Limitations != null)
                                {
                                    foreach (var limitation in seatDto.Limitations.OfType<string>())
                                        seatSlot.AddLimitation(new SlotLimitation(limitation));
                                }

                                // Map seat characteristics
                                if (seatDto.SeatCharacteristics != null)
                                {
                                    foreach (var ch in seatDto.SeatCharacteristics)
                                        seatSlot.AddSeatCharacteristic(new SeatCharacteristic(ch, false));
                                }

                                // Map raw seat characteristics
                                if (seatDto.RawSeatCharacteristics != null)
                                {
                                    foreach (var ch in seatDto.RawSeatCharacteristics)
                                        seatSlot.AddSeatCharacteristic(new SeatCharacteristic(ch, true));
                                }

                                // Map prices
                                if (seatDto.Prices?.Alternatives != null)
                                {
                                    foreach (var alt in seatDto.Prices.Alternatives)
                                    {
                                        var priceAlt = new SeatPriceAlternative(seatSlot.Id);
                                        foreach (var amount in alt)
                                            priceAlt.AddComponent(new SeatPriceComponent((decimal)amount.Amount, amount.Currency));
                                        seatSlot.AddPriceAlternative(priceAlt);
                                    }
                                }

                                // Map taxes
                                if (seatDto.Taxes?.Alternatives != null)
                                {
                                    foreach (var alt in seatDto.Taxes.Alternatives)
                                    {
                                        var taxAlt = new SeatTaxAlternative(seatSlot.Id);
                                        foreach (var amount in alt)
                                            taxAlt.AddComponent(new SeatPriceComponent((decimal)amount.Amount, amount.Currency));
                                        seatSlot.AddTax(taxAlt);
                                    }
                                }

                                seatRow.AddSeatSlot(seatSlot);
                            }
                        }

                        cabin.AddSeatRow(seatRow);
                    }
                }

                // Map seat columns
                if (cabinDto.SeatColumns != null)
                {
                    foreach (var colCode in cabinDto.SeatColumns)
                    {
                        var seatColumn = new SeatColumn(colCode, cabin.Id);
                        cabin.AddSeatColumn(seatColumn);
                    }
                }

                aircraft.AddCabin(cabin);
            }
        }

        return aircraft;
    }
}