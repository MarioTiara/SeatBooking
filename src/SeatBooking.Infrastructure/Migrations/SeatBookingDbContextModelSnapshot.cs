// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SeatBooking.Infrastructure.Persistance.DbContext;

#nullable disable

namespace SeatBooking.Infrastructure.Migrations
{
    [DbContext(typeof(SeatBookingDbContext))]
    partial class SeatBookingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FlightInfoStopAirport", b =>
                {
                    b.Property<int>("FlightInfoId")
                        .HasColumnType("int");

                    b.Property<string>("AirportCode")
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("StopOrder")
                        .HasColumnType("int");

                    b.HasKey("FlightInfoId", "AirportCode");

                    b.HasIndex("AirportCode");

                    b.ToTable("FlightInfoStopAirport", (string)null);
                });

            modelBuilder.Entity("SeatBooking.Domain.AircraftAggregate.Aircraft", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Code");

                    b.ToTable("Aircraft", (string)null);
                });

            modelBuilder.Entity("SeatBooking.Domain.AircraftAggregate.Cabin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AircraftCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Deck")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AircraftCode");

                    b.ToTable("Cabin", (string)null);
                });

            modelBuilder.Entity("SeatBooking.Domain.AircraftAggregate.SeatCharacteristic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsRaw")
                        .HasColumnType("bit");

                    b.Property<int>("SeatSlotId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeatSlotId");

                    b.ToTable("SeatCharacteristic", (string)null);
                });

            modelBuilder.Entity("SeatBooking.Domain.AircraftAggregate.SeatColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CabinId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CabinId");

                    b.ToTable("SeatColumn", (string)null);
                });

            modelBuilder.Entity("SeatBooking.Domain.AircraftAggregate.SeatPriceAlternative", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SeatSlotId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeatSlotId");

                    b.ToTable("SeatPriceAlternative", (string)null);
                });

            modelBuilder.Entity("SeatBooking.Domain.AircraftAggregate.SeatPriceComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("SeatPriceAlternativeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeatPriceAlternativeId");

                    b.ToTable("SeatPriceComponent", (string)null);
                });

            modelBuilder.Entity("SeatBooking.Domain.AircraftAggregate.SeatRow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CabinId")
                        .HasColumnType("int");

                    b.Property<int>("RowNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CabinId");

                    b.ToTable("SeatRow", (string)null);
                });

            modelBuilder.Entity("SeatBooking.Domain.AircraftAggregate.SeatSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Entitled")
                        .HasColumnType("bit");

                    b.Property<string>("EntitledRuleId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("FeeWaived")
                        .HasColumnType("bit");

                    b.Property<string>("FeeWaivedRuleId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("FreeOfCharge")
                        .HasColumnType("bit");

                    b.Property<bool>("OriginallySelected")
                        .HasColumnType("bit");

                    b.Property<string>("RefundIndicator")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("SeatRowId")
                        .HasColumnType("int");

                    b.Property<string>("StorefrontSlotCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("SeatRowId");

                    b.ToTable("SeatSlot", (string)null);
                });

            modelBuilder.Entity("SeatBooking.Domain.AircraftAggregate.SeatTaxAlternative", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SeatSlotId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeatSlotId");

                    b.ToTable("SeatTaxAlternative", (string)null);
                });

            modelBuilder.Entity("SeatBooking.Domain.AircraftAggregate.SeatTaxComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("SeatTaxAlternativeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeatTaxAlternativeId");

                    b.ToTable("SeatTaxComponent", (string)null);
                });

            modelBuilder.Entity("SeatBooking.Domain.PassengerAggregate.DocumentInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryOfBirth")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IssuingCountry")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PassengerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PassengerId")
                        .IsUnique();

                    b.ToTable("DocumentInfo", (string)null);
                });

            modelBuilder.Entity("SeatBooking.Domain.PassengerAggregate.FrequentFlyer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Airline")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PassengerId")
                        .HasColumnType("int");

                    b.Property<int>("TierNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PassengerId");

                    b.ToTable("FrequentFlyer");
                });

            modelBuilder.Entity("SeatBooking.Domain.PassengerAggregate.Passenger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PassengerIndex")
                        .HasColumnType("int");

                    b.Property<string>("PassengerNameNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Passenger", (string)null);
                });

            modelBuilder.Entity("SeatBooking.Domain.PassengerAggregate.PassengerSeatSelection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PassengerId")
                        .HasColumnType("int");

                    b.Property<int>("SeatSlotId")
                        .HasColumnType("int");

                    b.Property<int>("SeatSlotId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PassengerId")
                        .IsUnique();

                    b.HasIndex("SeatSlotId");

                    b.HasIndex("SeatSlotId1");

                    b.ToTable("PassengerSeatSelection", (string)null);
                });

            modelBuilder.Entity("SeatBooking.Domain.SegmentAggregate.FlightInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AirlineCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ArrivalTerminal")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DepartureTerminal")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("FlightNumber")
                        .HasColumnType("int");

                    b.Property<string>("OperatingAirlineCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("OperatingFlightNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FlightInfo");
                });

            modelBuilder.Entity("SeatBooking.Domain.SegmentAggregate.Segment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Arrival")
                        .HasColumnType("datetime2");

                    b.Property<bool>("AwardFare")
                        .HasColumnType("bit");

                    b.Property<string>("BookingClass")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CabinClass")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Departure")
                        .HasColumnType("datetime2");

                    b.Property<string>("DestinationAirportCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FareBasis")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.Property<int?>("FlightInfoId")
                        .HasColumnType("int");

                    b.Property<int>("FlightsMiles")
                        .HasColumnType("int");

                    b.Property<int>("LayoverDuration")
                        .HasColumnType("int");

                    b.Property<string>("OriginAirportCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SegmentRef")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("SubjectToGovernmentApproval")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DestinationAirportCode");

                    b.HasIndex("Equipment");

                    b.HasIndex("FlightId");

                    b.HasIndex("FlightInfoId");

                    b.HasIndex("OriginAirportCode");

                    b.ToTable("Segment", (string)null);
                });

            modelBuilder.Entity("SeatBooking.Domain.Shared.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PassengerId")
                        .HasColumnType("int");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Street1")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Street2")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("PassengerId")
                        .IsUnique();

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("SeatBooking.Domain.Shared.Airport", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Code");

                    b.ToTable("Airport");

                    b.HasData(
                        new
                        {
                            Code = "CGK",
                            City = "Jakarta",
                            Name = "Soekarno-Hatta International"
                        },
                        new
                        {
                            Code = "KUL",
                            City = "Kuala Lumpur",
                            Name = "Kuala Lumpur International"
                        });
                });

            modelBuilder.Entity("FlightInfoStopAirport", b =>
                {
                    b.HasOne("SeatBooking.Domain.Shared.Airport", null)
                        .WithMany()
                        .HasForeignKey("AirportCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SeatBooking.Domain.SegmentAggregate.FlightInfo", null)
                        .WithMany()
                        .HasForeignKey("FlightInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SeatBooking.Domain.AircraftAggregate.Cabin", b =>
                {
                    b.HasOne("SeatBooking.Domain.AircraftAggregate.Aircraft", "Aircraft")
                        .WithMany("Cabins")
                        .HasForeignKey("AircraftCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aircraft");
                });

            modelBuilder.Entity("SeatBooking.Domain.AircraftAggregate.SeatCharacteristic", b =>
                {
                    b.HasOne("SeatBooking.Domain.AircraftAggregate.SeatSlot", "SeatSlot")
                        .WithMany("SeatCharacteristics")
                        .HasForeignKey("SeatSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SeatSlot");
                });

            modelBuilder.Entity("SeatBooking.Domain.AircraftAggregate.SeatColumn", b =>
                {
                    b.HasOne("SeatBooking.Domain.AircraftAggregate.Cabin", "Cabin")
                        .WithMany("SeatColumns")
                        .HasForeignKey("CabinId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cabin");
                });

            modelBuilder.Entity("SeatBooking.Domain.AircraftAggregate.SeatPriceAlternative", b =>
                {
                    b.HasOne("SeatBooking.Domain.AircraftAggregate.SeatSlot", "SeatSlot")
                        .WithMany("PriceAlternatives")
                        .HasForeignKey("SeatSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SeatSlot");
                });

            modelBuilder.Entity("SeatBooking.Domain.AircraftAggregate.SeatPriceComponent", b =>
                {
                    b.HasOne("SeatBooking.Domain.AircraftAggregate.SeatPriceAlternative", "SeatPriceAlternative")
                        .WithMany("Components")
                        .HasForeignKey("SeatPriceAlternativeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SeatPriceAlternative");
                });

            modelBuilder.Entity("SeatBooking.Domain.AircraftAggregate.SeatRow", b =>
                {
                    b.HasOne("SeatBooking.Domain.AircraftAggregate.Cabin", "Cabin")
                        .WithMany("SeatRows")
                        .HasForeignKey("CabinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cabin");
                });

            modelBuilder.Entity("SeatBooking.Domain.AircraftAggregate.SeatSlot", b =>
                {
                    b.HasOne("SeatBooking.Domain.AircraftAggregate.SeatRow", "SeatRow")
                        .WithMany("SeatSlots")
                        .HasForeignKey("SeatRowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("SeatBooking.Domain.AircraftAggregate.SlotDesignation", "Designations", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<int>("SeatSlotId")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.HasIndex("SeatSlotId");

                            b1.ToTable("SlotDesignation", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("SeatSlotId");
                        });

                    b.OwnsMany("SeatBooking.Domain.AircraftAggregate.SlotLimitation", "Limitations", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<int>("SeatSlotId")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.HasIndex("SeatSlotId");

                            b1.ToTable("SlotLimitation", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("SeatSlotId");
                        });

                    b.Navigation("Designations");

                    b.Navigation("Limitations");

                    b.Navigation("SeatRow");
                });

            modelBuilder.Entity("SeatBooking.Domain.AircraftAggregate.SeatTaxAlternative", b =>
                {
                    b.HasOne("SeatBooking.Domain.AircraftAggregate.SeatSlot", "SeatSlot")
                        .WithMany("Taxes")
                        .HasForeignKey("SeatSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SeatSlot");
                });

            modelBuilder.Entity("SeatBooking.Domain.AircraftAggregate.SeatTaxComponent", b =>
                {
                    b.HasOne("SeatBooking.Domain.AircraftAggregate.SeatTaxAlternative", "SeatTaxAlternative")
                        .WithMany("Components")
                        .HasForeignKey("SeatTaxAlternativeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SeatTaxAlternative");
                });

            modelBuilder.Entity("SeatBooking.Domain.PassengerAggregate.DocumentInfo", b =>
                {
                    b.HasOne("SeatBooking.Domain.PassengerAggregate.Passenger", null)
                        .WithOne("DocumentInfo")
                        .HasForeignKey("SeatBooking.Domain.PassengerAggregate.DocumentInfo", "PassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SeatBooking.Domain.PassengerAggregate.FrequentFlyer", b =>
                {
                    b.HasOne("SeatBooking.Domain.PassengerAggregate.Passenger", null)
                        .WithMany("FrequentFlyers")
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SeatBooking.Domain.PassengerAggregate.Passenger", b =>
                {
                    b.OwnsOne("SeatBooking.Domain.PassengerAggregate.SpecialPreferences", "SpecialPreferences", b1 =>
                        {
                            b1.Property<int>("PassengerId")
                                .HasColumnType("int");

                            b1.Property<string>("MealPreference")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("MealPreference");

                            b1.Property<string>("SeatPreference")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("SeatPreference");

                            b1.HasKey("PassengerId");

                            b1.ToTable("Passenger");

                            b1.WithOwner()
                                .HasForeignKey("PassengerId");

                            b1.OwnsMany("SeatBooking.Domain.PassengerAggregate.SpecialRequest", "SpecialRequests", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b2.Property<int>("Id"));

                                    b2.Property<int>("PassengerId")
                                        .HasColumnType("int");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasMaxLength(255)
                                        .HasColumnType("nvarchar(255)");

                                    b2.HasKey("Id");

                                    b2.HasIndex("PassengerId");

                                    b2.ToTable("SpecialRequest", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("PassengerId");
                                });

                            b1.OwnsMany("SeatBooking.Domain.PassengerAggregate.SpecialServiceRequestRemark", "SpecialServiceRequestRemarks", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b2.Property<int>("Id"));

                                    b2.Property<int>("PassengerId")
                                        .HasColumnType("int");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasMaxLength(255)
                                        .HasColumnType("nvarchar(255)");

                                    b2.HasKey("Id");

                                    b2.HasIndex("PassengerId");

                                    b2.ToTable("SpecialServiceRequestRemark", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("PassengerId");
                                });

                            b1.Navigation("SpecialRequests");

                            b1.Navigation("SpecialServiceRequestRemarks");
                        });

                    b.OwnsMany("SeatBooking.Domain.Shared.ValueObjects.Email", "Emails", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<int>("PassengerId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)");

                            b1.HasKey("Id");

                            b1.HasIndex("PassengerId");

                            b1.ToTable("Email", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("PassengerId");
                        });

                    b.OwnsMany("SeatBooking.Domain.Shared.ValueObjects.Phone", "Phones", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<int>("PassengerId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.HasKey("Id");

                            b1.HasIndex("PassengerId");

                            b1.ToTable("Phone", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("PassengerId");
                        });

                    b.Navigation("Emails");

                    b.Navigation("Phones");

                    b.Navigation("SpecialPreferences")
                        .IsRequired();
                });

            modelBuilder.Entity("SeatBooking.Domain.PassengerAggregate.PassengerSeatSelection", b =>
                {
                    b.HasOne("SeatBooking.Domain.PassengerAggregate.Passenger", "Passenger")
                        .WithOne("SeatSelection")
                        .HasForeignKey("SeatBooking.Domain.PassengerAggregate.PassengerSeatSelection", "PassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SeatBooking.Domain.AircraftAggregate.SeatSlot", null)
                        .WithMany("SeatSelections")
                        .HasForeignKey("SeatSlotId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SeatBooking.Domain.AircraftAggregate.SeatSlot", "SeatSlot")
                        .WithMany()
                        .HasForeignKey("SeatSlotId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Passenger");

                    b.Navigation("SeatSlot");
                });

            modelBuilder.Entity("SeatBooking.Domain.SegmentAggregate.Segment", b =>
                {
                    b.HasOne("SeatBooking.Domain.Shared.Airport", "Destination")
                        .WithMany()
                        .HasForeignKey("DestinationAirportCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SeatBooking.Domain.AircraftAggregate.Aircraft", "Aircraft")
                        .WithMany()
                        .HasForeignKey("Equipment")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SeatBooking.Domain.SegmentAggregate.FlightInfo", "Flight")
                        .WithMany()
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SeatBooking.Domain.SegmentAggregate.FlightInfo", null)
                        .WithMany()
                        .HasForeignKey("FlightInfoId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SeatBooking.Domain.Shared.Airport", "Origin")
                        .WithMany()
                        .HasForeignKey("OriginAirportCode")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Aircraft");

                    b.Navigation("Destination");

                    b.Navigation("Flight");

                    b.Navigation("Origin");
                });

            modelBuilder.Entity("SeatBooking.Domain.Shared.Address", b =>
                {
                    b.HasOne("SeatBooking.Domain.PassengerAggregate.Passenger", null)
                        .WithOne("Address")
                        .HasForeignKey("SeatBooking.Domain.Shared.Address", "PassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SeatBooking.Domain.AircraftAggregate.Aircraft", b =>
                {
                    b.Navigation("Cabins");
                });

            modelBuilder.Entity("SeatBooking.Domain.AircraftAggregate.Cabin", b =>
                {
                    b.Navigation("SeatColumns");

                    b.Navigation("SeatRows");
                });

            modelBuilder.Entity("SeatBooking.Domain.AircraftAggregate.SeatPriceAlternative", b =>
                {
                    b.Navigation("Components");
                });

            modelBuilder.Entity("SeatBooking.Domain.AircraftAggregate.SeatRow", b =>
                {
                    b.Navigation("SeatSlots");
                });

            modelBuilder.Entity("SeatBooking.Domain.AircraftAggregate.SeatSlot", b =>
                {
                    b.Navigation("PriceAlternatives");

                    b.Navigation("SeatCharacteristics");

                    b.Navigation("SeatSelections");

                    b.Navigation("Taxes");
                });

            modelBuilder.Entity("SeatBooking.Domain.AircraftAggregate.SeatTaxAlternative", b =>
                {
                    b.Navigation("Components");
                });

            modelBuilder.Entity("SeatBooking.Domain.PassengerAggregate.Passenger", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("DocumentInfo")
                        .IsRequired();

                    b.Navigation("FrequentFlyers");

                    b.Navigation("SeatSelection");
                });
#pragma warning restore 612, 618
        }
    }
}
